'use strict';

var initPhotoSwipeFromDOM = function initPhotoSwipeFromDOM(gallerySelector) {
  // parse slide data (url, title, size ...) from DOM elements 
  // (children of gallerySelector)
  var parseThumbnailElements = function parseThumbnailElements(el) {
    var thumbElements = el.childNodes,
      numNodes = thumbElements.length,
      items = [],
      figureEl,
      linkEl,
      size,
      item;
    for (var i = 0; i < numNodes; i++) {
      figureEl = thumbElements[i]; // <figure> element

      // include only element nodes 
      if (figureEl.nodeType !== 1) {
        continue;
      }
      linkEl = figureEl.children[0]; // <a> element

      size = linkEl.getAttribute('data-size').split('x');

      // create slide object
      item = {
        src: linkEl.getAttribute('href'),
        w: parseInt(size[0], 10),
        h: parseInt(size[1], 10)
      };
      if (figureEl.children.length > 1) {
        // <figcaption> content
        item.title = figureEl.children[1].innerHTML;
      }
      if (linkEl.children.length > 0) {
        // <img> thumbnail element, retrieving thumbnail url
        item.msrc = linkEl.children[0].getAttribute('src');
      }
      item.el = figureEl; // save link to element for getThumbBoundsFn
      items.push(item);
    }
    return items;
  };

  // find nearest parent element
  var closest = function closest(el, fn) {
    return el && (fn(el) ? el : closest(el.parentNode, fn));
  };

  // triggers when user clicks on thumbnail
  var onThumbnailsClick = function onThumbnailsClick(e) {
    e = e || window.event;
    e.preventDefault ? e.preventDefault() : e.returnValue = false;
    var eTarget = e.target || e.srcElement;

    // find root element of slide
    var clickedListItem = closest(eTarget, function (el) {
      return el.tagName && el.tagName.toUpperCase() === 'FIGURE';
    });
    if (!clickedListItem) {
      return;
    }

    // find index of clicked item by looping through all child nodes
    // alternatively, you may define index via data- attribute
    var clickedGallery = clickedListItem.parentNode,
      childNodes = clickedListItem.parentNode.childNodes,
      numChildNodes = childNodes.length,
      nodeIndex = 0,
      index;
    for (var i = 0; i < numChildNodes; i++) {
      if (childNodes[i].nodeType !== 1) {
        continue;
      }
      if (childNodes[i] === clickedListItem) {
        index = nodeIndex;
        break;
      }
      nodeIndex++;
    }
    if (index >= 0) {
      // open PhotoSwipe if valid index found
      openPhotoSwipe(index, clickedGallery);
    }
    return false;
  };

  // parse picture index and gallery index from URL (#&pid=1&gid=2)
  var photoswipeParseHash = function photoswipeParseHash() {
    var hash = window.location.hash.substring(1),
      params = {};
    if (hash.length < 5) {
      return params;
    }
    var vars = hash.split('&');
    for (var i = 0; i < vars.length; i++) {
      if (!vars[i]) {
        continue;
      }
      var pair = vars[i].split('=');
      if (pair.length < 2) {
        continue;
      }
      params[pair[0]] = pair[1];
    }
    if (params.gid) {
      params.gid = parseInt(params.gid, 10);
    }
    return params;
  };
  var openPhotoSwipe = function openPhotoSwipe(index, galleryElement, disableAnimation, fromURL) {
    var pswpElement = document.querySelectorAll('.pswp')[0],
      gallery,
      options,
      items;
    items = parseThumbnailElements(galleryElement);

    // define options (if needed)
    options = {
      // define gallery index (for URL)
      galleryUID: galleryElement.getAttribute('data-pswp-uid'),
      getThumbBoundsFn: function (index) {
        // See Options -> getThumbBoundsFn section of documentation for more info
        var thumbnail = items[index].el.getElementsByTagName('img')[0],
          // find thumbnail
          pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
          rect = thumbnail.getBoundingClientRect();
        return {
          x: rect.left,
          y: rect.top + pageYScroll,
          w: rect.width
        };
      }
    };

    // PhotoSwipe opened from URL
    if (fromURL) {
      if (options.galleryPIDs) {
        // parse real index when custom PIDs are used 
        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
        for (var j = 0; j < items.length; j++) {
          if (items[j].pid == index) {
            options.index = j;
            break;
          }
        }
      } else {
        // in URL indexes start from 1
        options.index = parseInt(index, 10) - 1;
      }
    } else {
      options.index = parseInt(index, 10);
    }

    // exit if index not found
    if (isNaN(options.index)) {
      return;
    }
    if (disableAnimation) {
      options.showAnimationDuration = 0;
    }

    // Pass data to PhotoSwipe and initialize it
    gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
    gallery.init();
  };

  // loop through all gallery elements and bind events
  var galleryElements = document.querySelectorAll(gallerySelector);
  for (var i = 0, l = galleryElements.length; i < l; i++) {
    galleryElements[i].setAttribute('data-pswp-uid', i + 1);
    galleryElements[i].onclick = onThumbnailsClick;
  }

  // console.log('galleryElements =>', galleryElements);

  // Parse URL and open gallery if it contains #&pid=3&gid=1
  var hashData = photoswipeParseHash();
  if (hashData.pid && hashData.gid) {
    openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
  }
};

class InlinePhotoswipe {
  constructor(pswpNode, items) {
    this.pswpNode = pswpNode || null;
    this.items = items || [];
    this.options = {
      index: 0,
      history: false,
      focus: false,
      modal: false,
      closeOnScroll: false,
      closeOnVerticalDrag: false,
      closeEl: false,
      closeElClasses: [],
      shareEl: false,
      shareButtons: []
    };
    this.photoSwipeInst = null;
  }
  init() {
    if (!this.pswpNode || this.items.length === 0) return;

    // Initializes and opens PhotoSwipe
    this.photoSwipeInst = new PhotoSwipe(this.pswpNode, PhotoSwipeUI_Default, this.items, this.options);
    this.photoSwipeInst.init();
    this.photoSwipeInst.listen('afterChange', function () {
      const curItem = this.currItem;
      // slide to one video item and autoplay video
      if (curItem.videosrc) {
        const videoNode = curItem.container.children[0];
        setTimeout(() => {
          videoNode && videoNode.play();
        }, 500);
      }
      // slide to a not video item pause all video items
      else {
        // container
        const parentNode = curItem.container.parentNode.parentNode;
        const videoList = parentNode.querySelectorAll('video');
        videoList.forEach(vi => {
          vi.pause();
        });
      }
    });
  }
}

initPhotoSwipeFromDOM('.showcase-gallery');
const inlineShowcaseEles = document.querySelectorAll('.showcase-gallery__inline');
const midAutumnSlides = [{
  src: 'assets/yqt/campaign/mid-autumn/index.jpg',
  w: 562,
  h: 1218,
  title: '活動首頁'
}, {
  src: 'assets/yqt/campaign/mid-autumn/produce.jpg',
  w: 562,
  h: 1218
}, {
  src: 'assets/yqt/campaign/mid-autumn/poster.jpg',
  w: 562,
  h: 1218
}];
const thanksgivingSlides = [{
  src: 'assets/yqt/campaign/thanksgiving/index.jpg',
  w: 562,
  h: 1218,
  title: '活動首頁'
}, {
  src: 'assets/yqt/campaign/thanksgiving/message.jpg',
  w: 562,
  h: 1218
}, {
  src: 'assets/yqt/campaign/thanksgiving/letter.jpg',
  w: 562,
  h: 1218
}, {
  videosrc: 'assets/yqt/campaign/thanksgiving/RPReplay_Final1607095077.mp4',
  w: 562,
  h: 1218,
  html: `<video controls muted disablePictureInPicture controlsList="nodownload" ` + `poster="assets/yqt/campaign/thanksgiving/letter.jpg">` + `<source src="assets/yqt/campaign/thanksgiving/RPReplay_Final1607095077.mp4" type="video/mp4">` + `</video>`
}];
const wxgoldSlides = [{
  src: 'assets/wxgold/IMG_1566.jpg',
  w: 562,
  h: 1218,
  title: '金沙紅包'
}, {
  src: 'assets/wxgold/IMG_1567.jpg',
  w: 562,
  h: 1218
}, {
  src: 'assets/wxgold/IMG_1554.jpg',
  w: 562,
  h: 1218
}, {
  videosrc: 'assets/wxgold/RPReplay_Final1561480690.mp4',
  w: 562,
  h: 1218,
  html: `<video controls muted disablePictureInPicture controlsList="nodownload">` + `<source src="assets/wxgold/RPReplay_Final1561480690.mp4" type="video/mp4">` + `</video>`
}];
const wecardSlides = [{
  src: 'assets/wecard/coupon-1.jpg',
  w: 540,
  h: 1170,
  title: '優惠券首頁'
}, {
  src: 'assets/wecard/coupon-2.jpg',
  w: 540,
  h: 1170
}, {
  src: 'assets/wecard/coupon-3.jpg',
  w: 540,
  h: 1170
}, {
  src: 'assets/wecard/pt-index.jpg',
  w: 562,
  h: 1444
}, {
  src: 'assets/wecard/pt-invited.jpg',
  w: 562,
  h: 1218
}, {
  videosrc: 'assets/wecard/RPReplay_Final1561606039.mp4',
  w: 562,
  h: 1218,
  html: `<video controls muted disablePictureInPicture controlsList="nodownload" poster="assets/wecard/event-618.jpg">` + `<source src="assets/wecard/RPReplay_Final1561606039.mp4" type="video/mp4">` + `</video>`
}];
inlineShowcaseEles.forEach(el => {
  if (el.dataset.slide === 'mid-autumn') {
    new InlinePhotoswipe(el, midAutumnSlides).init();
  } else if (el.dataset.slide === 'thanksgiving') {
    new InlinePhotoswipe(el, thanksgivingSlides).init();
  } else if (el.dataset.slide === 'wxgold') {
    new InlinePhotoswipe(el, wxgoldSlides).init();
  } else if (el.dataset.slide === 'wecard') {
    new InlinePhotoswipe(el, wecardSlides).init();
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
